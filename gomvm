#!/bin/bash

# gomvm - Go Multi Version Manager
# A wrapper script for managing multiple Go versions

# 色の定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# 安全な終了処理のための関数
safe_exit() {
  # スクリプトが source で実行された場合は return を使用
  # そうでない場合は exit を使用
  if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    return "$1"
  else
    exit "$1"
  fi
}

# メッセージ表示のヘルパー関数
print_info() {
  echo -e "${BLUE}ℹ️ $1${NC}"
}

print_success() {
  echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
  echo -e "${YELLOW}⚠️ $1${NC}"
}

print_error() {
  echo -e "${RED}❌ $1${NC}"
}

# Help function
show_help() {
  echo -e "${PURPLE}🔧 Go Multi Version Manager (gomvm)${NC}"
  echo ""
  echo -e "${PURPLE}使用方法:${NC}"
  echo -e "  ${GREEN}gomvm install <version>${NC}    - Go バージョンをインストール"
  echo -e "  ${GREEN}gomvm switch <version>${NC}     - Go バージョンを切り替え (source コマンドと共に使用)"
  echo -e "  ${GREEN}gomvm list${NC}                 - 利用可能な Go バージョンを一覧表示"
  echo -e "  ${GREEN}gomvm installed${NC}            - インストール済みの Go バージョンを一覧表示"
  echo -e "  ${GREEN}gomvm uninstall <version>${NC}  - Go バージョンをアンインストール"
  echo -e "  ${GREEN}gomvm setup${NC}                - 現在のユーザー用に gomvm をセットアップ"
  echo -e "  ${GREEN}gomvm uninstall-self${NC}       - gomvm 自体をアンインストール"
  echo -e "  ${GREEN}gomvm help${NC}                 - このヘルプメッセージを表示"
  echo ""
  echo -e "${PURPLE}例:${NC}"
  echo -e "  ${GREEN}gomvm install 1.24.1${NC}       - Go 1.24.1 をインストール"
  echo -e "  ${GREEN}source gomvm switch 1.24.1${NC} - Go 1.24.1 に切り替え"
}

# Dynamic configuration - automatically find the script directory
# Try to load the configuration file if it exists
GOMVM_CONFIG_DIR="$HOME/.config/gomvm"
GOMVM_CONFIG_FILE="$GOMVM_CONFIG_DIR/config"

if [ -f "$GOMVM_CONFIG_FILE" ]; then
  # shellcheck source=/dev/null
  source "$GOMVM_CONFIG_FILE" || print_warning "設定ファイルの読み込みに失敗しました"
fi

# 現在のディレクトリを最優先
REAL_PATH="$(readlink -f "$0")"
CURRENT_DIR_SCRIPTS="$(dirname "$REAL_PATH")/scripts/ubuntu"

# Try various possible locations for the scripts, prioritizing current directory
for dir in \
  "$CURRENT_DIR_SCRIPTS" \
  "$(dirname "$(dirname "$REAL_PATH")")/scripts/ubuntu" \
  "$GOMVM_SCRIPTS_DIR" \
  "$HOME/go-multi-version-manager/scripts/ubuntu" \
  "$HOME/golang/go-multi-version-manager/scripts/ubuntu"; do
  if [ -d "$dir" ]; then
    SCRIPT_DIR="$dir"
    break
  fi
done

# Verify the SCRIPT_DIR exists and contains required scripts
if [ -z "$SCRIPT_DIR" ] || [ ! -d "$SCRIPT_DIR" ] || [ ! -f "$SCRIPT_DIR/switch_go_version.sh" ]; then
  print_error "スクリプトディレクトリが見つからないか、必要なスクリプトがありません。"
  print_info "GOMVM_SCRIPTS_DIR 環境変数をubuntuスクリプトディレクトリのパスに設定してください。"
  echo -e "${CYAN}例: export GOMVM_SCRIPTS_DIR=/path/to/go-multi-version-manager/scripts/ubuntu${NC}"
  safe_exit 1
fi

# Function to execute a script with arguments
run_script() {
  local script="$1"
  shift
  
  # Check if the script exists
  if [ ! -f "${SCRIPT_DIR}/${script}" ]; then
    print_error "スクリプト ${script} が ${SCRIPT_DIR} に見つかりません"
    safe_exit 1
  fi
  
  if [[ "$script" == "switch_go_version.sh" ]]; then
    # 安全に実行するための処理
    # 元のスクリプトの代わりに直接処理を行う
    switch_go_directly "$@"
  else
    # For other scripts, we can execute them directly
    "${SCRIPT_DIR}/${script}" "$@" || {
      print_error "スクリプト ${script} は終了コード $? で失敗しました"
      safe_exit 1
    }
  fi
}

# Safer alternative to switch_go_version.sh
switch_go_directly() {
  local GO_VERSION=$1
  
  if [ -z "$GO_VERSION" ]; then
    print_error "Go バージョンの引数がありません。"
    print_info "使用法: source gomvm switch <go_version>"
    safe_exit 1
  fi
  
  # Temporarily add $HOME/go/bin to PATH
  if ! echo "$PATH" | grep -q "$HOME/go/bin"; then
    export PATH="$HOME/go/bin:$PATH"
  fi
  
  # Check if goX.X.X command exists
  if ! command -v "go${GO_VERSION}" &> /dev/null; then
    print_info "Go バージョン $GO_VERSION はインストールされていません。インストールします..."
    "${SCRIPT_DIR}/install_go_with_command.sh" "${GO_VERSION}" || {
      print_error "Go $GO_VERSION のインストールに失敗しました。セットアップを確認してください。"
      safe_exit 1
    }
    
    # Verify installation after setting PATH
    if ! command -v "go${GO_VERSION}" &> /dev/null; then
      print_error "インストール確認に失敗しました。PATH設定を確認してください。"
      safe_exit 1
    fi
  fi
  
  # Get the correct GOROOT for the specified version
  # First, find the binary location
  local GO_BINARY_PATH
  GO_BINARY_PATH=$(command -v "go${GO_VERSION}")
  
  if [ -z "$GO_BINARY_PATH" ]; then
    print_error "go${GO_VERSION} バイナリが見つかりません。"
    safe_exit 1
  fi
  
  # Get GOROOT from the specific version binary
  local NEW_GOROOT
  NEW_GOROOT=$("go${GO_VERSION}" env GOROOT)
  
  if [ -z "$NEW_GOROOT" ] || [ ! -d "$NEW_GOROOT" ]; then
    print_error "Go ${GO_VERSION} の GOROOT が取得できません。"
    safe_exit 1
  fi
  
  # Update environment variables in the correct order
  export GOROOT="$NEW_GOROOT"
  export PATH="$NEW_GOROOT/bin:$HOME/go/bin:$PATH"
  
  # Remove duplicate entries from PATH
  PATH_TEMP=$(echo "$PATH" | awk -v RS=':' '!a[$1]++' | paste -sd:)
  export PATH="$PATH_TEMP"
  
  # Set GOPATH to default if not set
  if [ -z "$GOPATH" ]; then
    export GOPATH="$HOME/go"
  fi
  
  # Save version selection for persistence
  local GO_SELECTED_VERSION_FILE="$HOME/.go_selected_version"
  echo "$GO_VERSION" > "$GO_SELECTED_VERSION_FILE"
  
  # Confirm version switch
  print_success "Go $GO_VERSION に切り替えました。"
  print_info "現在の Go バージョン: $(go version)"
  print_info "GOROOT: $GOROOT"
  print_info "GOPATH: $GOPATH"
  print_info "バイナリの場所: $(which go)"
}

# Main command handler
if [ $# -eq 0 ]; then
  # 引数なしで実行された場合はヘルプを表示
  show_help
  safe_exit 0
fi

case "$1" in
  "install")
    if [ -z "$2" ]; then
      print_error "バージョン番号が必要です。"
      print_info "使用法: gomvm install <version>"
      safe_exit 1
    fi
    run_script "install_go_with_command.sh" "$2"
    ;;
  
  "replace-default")
    if [ -z "$2" ]; then
      print_error "バージョン番号が必要です。"
      print_info "使用法: gomvm replace-default <version>"
      safe_exit 1
    fi
    run_script "install_go_replace_default.sh" "$2"
    ;;
    
  "install-specific")
    if [ -z "$2" ]; then
      print_error "バージョン番号が必要です。"
      print_info "使用法: gomvm install-specific <version>"
      safe_exit 1
    fi
    run_script "install_go_specific.sh" "$2"
    ;;
    
  "switch")
    if [ -z "$2" ]; then
      print_error "バージョン番号が必要です。"
      print_info "使用法: source gomvm switch <version>"
      safe_exit 1
    fi
    
    # スクリプトが source で実行されたかを確認
    if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
      print_warning "'gomvm switch' は現在のシェルに影響するため、'source' と共に実行する必要があります。"
      print_info "以下を実行してください: source gomvm switch $2"
      safe_exit 1
    fi
    
    switch_go_directly "$2"
    ;;
    
  "list")
    run_script "list_go_versions.sh"
    ;;
    
  "installed")
    run_script "go_versions.sh"
    ;;
    
  "uninstall")
    if [ -z "$2" ]; then
      print_error "バージョン番号が必要です。"
      print_info "使用法: gomvm uninstall <version>"
      safe_exit 1
    fi
    run_script "uninstall_go_with_command.sh" "$2"
    ;;
    
  "setup")
    # Setup gomvm for current user
    print_info "現在のユーザー用に gomvm をセットアップしています..."
    
    # Create bin directory if it doesn't exist
    mkdir -p "$HOME/.local/bin"
    
    # Copy or create a symlink to this script
    SCRIPT_PATH="$(readlink -f "$0")"
    TARGET_PATH="$HOME/.local/bin/gomvm"
    
    if [ "$SCRIPT_PATH" != "$TARGET_PATH" ]; then
      cp "$SCRIPT_PATH" "$TARGET_PATH"
      chmod +x "$TARGET_PATH"
      print_success "gomvm を $TARGET_PATH にコピーしました"
    else
      print_info "gomvm はすでに $TARGET_PATH にインストールされています"
    fi
    
    # Check if PATH includes ~/.local/bin
    if ! echo "$PATH" | grep -q "$HOME/.local/bin"; then
      echo "export PATH=\"\$HOME/.local/bin:\$PATH\"" >> "$HOME/.bashrc"
      print_success "\$HOME/.local/bin を ~/.bashrc の PATH に追加しました"
      print_info "現在のセッションを更新するには 'source ~/.bashrc' を実行してください"
    else
      print_info "\$HOME/.local/bin はすでに PATH に含まれています"
    fi
    
    # Store the scripts directory in user config
    mkdir -p "$GOMVM_CONFIG_DIR"
    echo "GOMVM_SCRIPTS_DIR=\"$SCRIPT_DIR\"" > "$GOMVM_CONFIG_FILE"
    print_success "設定を $GOMVM_CONFIG_FILE に保存しました"
    
    echo ""
    print_success "gomvm のセットアップが完了しました！"
    print_info "これで任意の場所から 'gomvm' を使用できます。"
    print_info "Go バージョンを切り替えるには: source gomvm switch <version>"
    echo -e "${CYAN}例: source gomvm switch 1.24.0${NC}"
    print_info "現在のスクリプトディレクトリ: $SCRIPT_DIR"
    ;;
  
  "uninstall-self")
    # Uninstall gomvm
    print_info "gomvm をアンインストールしています..."
    
    # Confirm uninstallation
    read -r -p "本当に gomvm をアンインストールしますか？ (y/N): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
      print_info "アンインストールをキャンセルしました。"
      safe_exit 0
    fi
    
    # Remove gomvm binary
    if [ -f "$HOME/.local/bin/gomvm" ]; then
      rm -f "$HOME/.local/bin/gomvm"
      print_success "gomvm バイナリを $HOME/.local/bin/gomvm から削除しました"
    else
      print_info "gomvm バイナリが $HOME/.local/bin に見つかりません"
    fi
    
    # Remove configuration
    if [ -d "$GOMVM_CONFIG_DIR" ]; then
      rm -rf "$GOMVM_CONFIG_DIR"
      print_success "設定ディレクトリ $GOMVM_CONFIG_DIR を削除しました"
    fi
    
    echo ""
    print_success "gomvm のアンインストールが完了しました。"
    print_info "注: Go バージョンのインストールとリポジトリはそのまま残されています。"
    print_info "すべてを完全に削除するには、以下も削除できます:"
    echo -e "${CYAN}1. スクリプトを含むリポジトリディレクトリ${NC}"
    echo -e "${CYAN}2. $HOME/go/bin/ の Go バージョン（'gomvm install' でインストールした場合）${NC}"
    ;;
    
  "help"|"--help"|"-h")
    show_help
    ;;
    
  *)
    print_error "不明なコマンド: $1"
    show_help
    safe_exit 1
    ;;
esac

safe_exit 0
